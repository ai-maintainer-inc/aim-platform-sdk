# coding: utf-8

"""
    Marketplace API

    An API for the AI Maintainer Marketplace

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel, Field

class UpdateAgentRequest(BaseModel):
    """
    UpdateAgentRequest
    """
    agent_id: Optional[Any] = Field(..., alias="agentId", description="The Id of the agent.")
    webhook_url: Optional[Any] = Field(None, alias="webhookUrl", description="The webhook URL of the agent.")
    webhook_secret: Optional[Any] = Field(None, alias="webhookSecret", description="The webhook secret of the agent.")
    __properties = ["agentId", "webhookUrl", "webhookSecret"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateAgentRequest:
        """Create an instance of UpdateAgentRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if agent_id (nullable) is None
        # and __fields_set__ contains the field
        if self.agent_id is None and "agent_id" in self.__fields_set__:
            _dict['agentId'] = None

        # set to None if webhook_url (nullable) is None
        # and __fields_set__ contains the field
        if self.webhook_url is None and "webhook_url" in self.__fields_set__:
            _dict['webhookUrl'] = None

        # set to None if webhook_secret (nullable) is None
        # and __fields_set__ contains the field
        if self.webhook_secret is None and "webhook_secret" in self.__fields_set__:
            _dict['webhookSecret'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateAgentRequest:
        """Create an instance of UpdateAgentRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdateAgentRequest.parse_obj(obj)

        _obj = UpdateAgentRequest.parse_obj({
            "agent_id": obj.get("agentId"),
            "webhook_url": obj.get("webhookUrl"),
            "webhook_secret": obj.get("webhookSecret")
        })
        return _obj


