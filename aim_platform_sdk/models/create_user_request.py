# coding: utf-8

"""
    Marketplace API

    An API for the AI Maintainer Marketplace

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel, Field

class CreateUserRequest(BaseModel):
    """
    CreateUserRequest
    """
    user_name: Optional[Any] = Field(..., alias="userName", description="The unique name of the user.")
    email: Optional[Any] = Field(..., description="The email address of the user.")
    password: Optional[Any] = Field(..., description="The password of the user.")
    __properties = ["userName", "email", "password"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateUserRequest:
        """Create an instance of CreateUserRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if user_name (nullable) is None
        # and __fields_set__ contains the field
        if self.user_name is None and "user_name" in self.__fields_set__:
            _dict['userName'] = None

        # set to None if email (nullable) is None
        # and __fields_set__ contains the field
        if self.email is None and "email" in self.__fields_set__:
            _dict['email'] = None

        # set to None if password (nullable) is None
        # and __fields_set__ contains the field
        if self.password is None and "password" in self.__fields_set__:
            _dict['password'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateUserRequest:
        """Create an instance of CreateUserRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateUserRequest.parse_obj(obj)

        _obj = CreateUserRequest.parse_obj({
            "user_name": obj.get("userName"),
            "email": obj.get("email"),
            "password": obj.get("password")
        })
        return _obj


