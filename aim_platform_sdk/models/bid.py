# coding: utf-8

"""
    Platform API

    The AI Maintainer Platform API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel, Field, validator

class Bid(BaseModel):
    """
    Bid
    """
    operator_id: Optional[Any] = Field(..., alias="operatorId", description="The userId of the operator who created the bid.")
    bid_id: Optional[Any] = Field(..., alias="bidId", description="The Id of the bid.")
    ticket_id: Optional[Any] = Field(..., alias="ticketId", description="The Id of the ticket the bid is for.")
    agent_id: Optional[Any] = Field(..., alias="agentId", description="The Id of the agent making the bid.")
    rate: Optional[Any] = Field(..., description="Unused.")
    status: Optional[Any] = Field(..., description="The current status of the bid in its lifecycle.")
    created_at: Optional[Any] = Field(..., alias="createdAt", description="The date and time the bid was created.")
    updated_at: Optional[Any] = Field(..., alias="updatedAt", description="The date and time the bid was last updated.")
    __properties = ["operatorId", "bidId", "ticketId", "agentId", "rate", "status", "createdAt", "updatedAt"]

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('open', 'closed', 'pending'):
            raise ValueError("must be one of enum values ('open', 'closed', 'pending')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Bid:
        """Create an instance of Bid from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if operator_id (nullable) is None
        # and __fields_set__ contains the field
        if self.operator_id is None and "operator_id" in self.__fields_set__:
            _dict['operatorId'] = None

        # set to None if bid_id (nullable) is None
        # and __fields_set__ contains the field
        if self.bid_id is None and "bid_id" in self.__fields_set__:
            _dict['bidId'] = None

        # set to None if ticket_id (nullable) is None
        # and __fields_set__ contains the field
        if self.ticket_id is None and "ticket_id" in self.__fields_set__:
            _dict['ticketId'] = None

        # set to None if agent_id (nullable) is None
        # and __fields_set__ contains the field
        if self.agent_id is None and "agent_id" in self.__fields_set__:
            _dict['agentId'] = None

        # set to None if rate (nullable) is None
        # and __fields_set__ contains the field
        if self.rate is None and "rate" in self.__fields_set__:
            _dict['rate'] = None

        # set to None if status (nullable) is None
        # and __fields_set__ contains the field
        if self.status is None and "status" in self.__fields_set__:
            _dict['status'] = None

        # set to None if created_at (nullable) is None
        # and __fields_set__ contains the field
        if self.created_at is None and "created_at" in self.__fields_set__:
            _dict['createdAt'] = None

        # set to None if updated_at (nullable) is None
        # and __fields_set__ contains the field
        if self.updated_at is None and "updated_at" in self.__fields_set__:
            _dict['updatedAt'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Bid:
        """Create an instance of Bid from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Bid.parse_obj(obj)

        _obj = Bid.parse_obj({
            "operator_id": obj.get("operatorId"),
            "bid_id": obj.get("bidId"),
            "ticket_id": obj.get("ticketId"),
            "agent_id": obj.get("agentId"),
            "rate": obj.get("rate"),
            "status": obj.get("status"),
            "created_at": obj.get("createdAt"),
            "updated_at": obj.get("updatedAt")
        })
        return _obj


