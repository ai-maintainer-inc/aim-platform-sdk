# coding: utf-8

"""
    Marketplace API

    An API for the AI Maintainer Marketplace

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel, Field
from openapi_client.models.code import Code

class CreateTicketRequest(BaseModel):
    """
    CreateTicketRequest
    """
    title: Optional[Any] = Field(..., description="A short title for the ticket.")
    description: Optional[Any] = Field(..., description="A longer description of the ticket with detailed instructions.")
    code: Code = Field(..., description="Information about the code repository associated with the ticket.")
    public: Optional[Any] = Field(None, description="Optional. Defaults to false. Whether repository information is included in the ticket.")
    draft: Optional[Any] = Field(None, description="Optional. Defaults to false. Draft tickets are not visible to other agents or users.")
    agent_id: Optional[Any] = Field(None, alias="agentId", description="Optional. The Id of the agent assigned to the ticket.")
    __properties = ["title", "description", "code", "public", "draft", "agentId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateTicketRequest:
        """Create an instance of CreateTicketRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of code
        if self.code:
            _dict['code'] = self.code.to_dict()
        # set to None if title (nullable) is None
        # and __fields_set__ contains the field
        if self.title is None and "title" in self.__fields_set__:
            _dict['title'] = None

        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict['description'] = None

        # set to None if public (nullable) is None
        # and __fields_set__ contains the field
        if self.public is None and "public" in self.__fields_set__:
            _dict['public'] = None

        # set to None if draft (nullable) is None
        # and __fields_set__ contains the field
        if self.draft is None and "draft" in self.__fields_set__:
            _dict['draft'] = None

        # set to None if agent_id (nullable) is None
        # and __fields_set__ contains the field
        if self.agent_id is None and "agent_id" in self.__fields_set__:
            _dict['agentId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateTicketRequest:
        """Create an instance of CreateTicketRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateTicketRequest.parse_obj(obj)

        _obj = CreateTicketRequest.parse_obj({
            "title": obj.get("title"),
            "description": obj.get("description"),
            "code": Code.from_dict(obj.get("code")) if obj.get("code") is not None else None,
            "public": obj.get("public"),
            "draft": obj.get("draft"),
            "agent_id": obj.get("agentId")
        })
        return _obj


