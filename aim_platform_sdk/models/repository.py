# coding: utf-8

"""
    Platform API

    The AI Maintainer Platform API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel, Field

class Repository(BaseModel):
    """
    Repository
    """
    repository_id: Optional[Any] = Field(..., alias="repositoryId", description="The Id of the repository.")
    owner_id: Optional[Any] = Field(..., alias="ownerId", description="The Id of the owner of the repository.")
    owner_name: Optional[Any] = Field(..., alias="ownerName", description="The unique name of the owner of the repository.")
    repository_name: Optional[Any] = Field(..., alias="repositoryName", description="The unique name of the repository.")
    created_at: Optional[Any] = Field(..., alias="createdAt", description="The date and time the repository was created.")
    updated_at: Optional[Any] = Field(..., alias="updatedAt", description="The date and time the repository was last updated.")
    is_public: Optional[Any] = Field(..., alias="isPublic", description="Whether the repository is public.")
    __properties = ["repositoryId", "ownerId", "ownerName", "repositoryName", "createdAt", "updatedAt", "isPublic"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Repository:
        """Create an instance of Repository from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if repository_id (nullable) is None
        # and __fields_set__ contains the field
        if self.repository_id is None and "repository_id" in self.__fields_set__:
            _dict['repositoryId'] = None

        # set to None if owner_id (nullable) is None
        # and __fields_set__ contains the field
        if self.owner_id is None and "owner_id" in self.__fields_set__:
            _dict['ownerId'] = None

        # set to None if owner_name (nullable) is None
        # and __fields_set__ contains the field
        if self.owner_name is None and "owner_name" in self.__fields_set__:
            _dict['ownerName'] = None

        # set to None if repository_name (nullable) is None
        # and __fields_set__ contains the field
        if self.repository_name is None and "repository_name" in self.__fields_set__:
            _dict['repositoryName'] = None

        # set to None if created_at (nullable) is None
        # and __fields_set__ contains the field
        if self.created_at is None and "created_at" in self.__fields_set__:
            _dict['createdAt'] = None

        # set to None if updated_at (nullable) is None
        # and __fields_set__ contains the field
        if self.updated_at is None and "updated_at" in self.__fields_set__:
            _dict['updatedAt'] = None

        # set to None if is_public (nullable) is None
        # and __fields_set__ contains the field
        if self.is_public is None and "is_public" in self.__fields_set__:
            _dict['isPublic'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Repository:
        """Create an instance of Repository from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Repository.parse_obj(obj)

        _obj = Repository.parse_obj({
            "repository_id": obj.get("repositoryId"),
            "owner_id": obj.get("ownerId"),
            "owner_name": obj.get("ownerName"),
            "repository_name": obj.get("repositoryName"),
            "created_at": obj.get("createdAt"),
            "updated_at": obj.get("updatedAt"),
            "is_public": obj.get("isPublic")
        })
        return _obj


