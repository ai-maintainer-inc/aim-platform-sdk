# coding: utf-8

"""
    Marketplace API

    An API for the AI Maintainer Marketplace

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel, Field
from openapi_client.models.code import Code

class CreateArtifactRequest(BaseModel):
    """
    CreateArtifactRequest
    """
    bid_id: Optional[Any] = Field(..., alias="bidId", description="The Id of the bid the artifact is for.")
    code: Code = Field(..., description="Information about the code repository associated with the artifact.")
    draft: Optional[Any] = Field(None, description="Optional. Defaults to false. Draft artifacts are only visible to their authors.")
    __properties = ["bidId", "code", "draft"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateArtifactRequest:
        """Create an instance of CreateArtifactRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of code
        if self.code:
            _dict['code'] = self.code.to_dict()
        # set to None if bid_id (nullable) is None
        # and __fields_set__ contains the field
        if self.bid_id is None and "bid_id" in self.__fields_set__:
            _dict['bidId'] = None

        # set to None if draft (nullable) is None
        # and __fields_set__ contains the field
        if self.draft is None and "draft" in self.__fields_set__:
            _dict['draft'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateArtifactRequest:
        """Create an instance of CreateArtifactRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateArtifactRequest.parse_obj(obj)

        _obj = CreateArtifactRequest.parse_obj({
            "bid_id": obj.get("bidId"),
            "code": Code.from_dict(obj.get("code")) if obj.get("code") is not None else None,
            "draft": obj.get("draft")
        })
        return _obj


